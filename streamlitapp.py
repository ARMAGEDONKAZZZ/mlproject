import streamlit as st
import requests
import json

import pandas as pd

API_URL = "http://127.0.0.1:8000"

st.set_page_config(page_title="XGBoost –ö–æ–Ω–≤–µ—Ä—Å–∏—è", page_icon="üéØ", layout="centered")
st.title("üéØ XGBoost –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")

# --- –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ---
st.header("üîπ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", min_value=18, max_value=100, value=25)
ad_spend = st.number_input("–†–µ–∫–ª–∞–º–∞ (AdSpend)", min_value=0, value=100, step=1, format="%d")
ctr = st.slider("CTR (Click-Through Rate) ‚Äî —ç—Ç–æ –¥–æ–ª—è –∫–ª–∏–∫–æ–≤ –ø–æ —Ä–µ–∫–ª–∞–º–µ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –µ—ë –ø–æ–∫–∞–∑–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–∫–∞–∑–∞–ª–∏ 100 —Ä–∞–∑ –∏ –∫–ª–∏–∫–Ω—É–ª–∏ 10 —Ä–∞–∑, CTR = 10%", min_value=0.0, max_value=1.0, value=0.05)
visits = st.number_input("–ü–æ—Å–µ—â–µ–Ω–∏—è —Å–∞–π—Ç–∞", min_value=0, value=10)
time_on_site = st.number_input("–í—Ä–µ–º—è –Ω–∞ —Å–∞–π—Ç–µ (—Å–µ–∫)", min_value=0.0, value=30.0)

gender_male = st.selectbox("–ü–æ–ª", ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"])
gender_male = 1 if gender_male == "–ú—É–∂—Å–∫–æ–π" else 0

channel = st.selectbox("–ö–∞–Ω–∞–ª –∫–∞–º–ø–∞–Ω–∏–∏", ["PPC", "Referral", "SEO", "Social Media"])
channels = {
    "CampaignChannel_PPC": 0,
    "CampaignChannel_Referral": 0,
    "CampaignChannel_SEO": 0,
    "CampaignChannel_Social Media": 0
}
channels[f"CampaignChannel_{channel}"] = 1

# --- –ö–Ω–æ–ø–∫–∞ ---
if st.button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
    payload = {
        "Age": age,
        "AdSpend": ad_spend,
        "ClickThroughRate": ctr,
        "WebsiteVisits": visits,
        "TimeOnSite": time_on_site,
        "Gender_Male": gender_male,
        **channels
    }

    try:
        r = requests.post(f"{API_URL}/predict", json=payload)
        if r.status_code == 200:
            result = r.json()
            st.success(f"‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {result['prediction']} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {result['probability']})")
        else:
            st.error(f"–û—à–∏–±–∫–∞: {r.status_code} - {r.text}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

# --- –ò—Å—Ç–æ—Ä–∏—è ---
st.header("üìú –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
    try:
        r = requests.get(f"{API_URL}/predictions")
        if r.status_code == 200:
            history = r.json()
            if len(history) == 0:
                st.info("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
            else:
                df = pd.DataFrame(history)
                st.dataframe(df)
        else:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {r.status_code}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")


# --- –°–∫–∞—á–∞—Ç—å JSON ---
st.header("üì• –°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
r = requests.get(f"{API_URL}/predictions")
if r.status_code == 200:
    history = r.json()
    if len(history) > 0:
        json_data = json.dumps(history, indent=4, ensure_ascii=False)
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å predictions.json",
            data=json_data,
            file_name="predictions.json",
            mime="application/json"
        )
    else:
        st.info("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ —Å–∫–∞—á–∏–≤–∞—Ç—å.")
else:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é.")

